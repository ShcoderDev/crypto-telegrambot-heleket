import asyncio
import json
import logging
from datetime import datetime, timedelta

from aiogram.client.default import DefaultBotProperties
from aiohttp import ClientSession
from aiogram import Bot, Dispatcher, F, html
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart, Command
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup

from config import BOT_TOKEN
from db import set_subscription, get_subscription, init_db, set_invoice_uuid, get_invoice_uuid
from utils import generate_headers

dp = Dispatcher()


# ===== –û–ë–†–ê–ë–û–¢–ß–ò–ö –ö–û–ú–ê–ù–¢–´ –°–¢–ê–†–¢ =====
@dp.message(CommandStart())
async def start_handler(message: Message):
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üíé –ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="buy_subscription")],
        [InlineKeyboardButton(text="üë§ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç", callback_data="profile")]
    ])

    await message.answer(f"–ü—Ä–∏–≤–µ—Ç, {html.bold(message.from_user.full_name)}!\n"
                         "–≠—Ç–æ—Ç –±–æ—Ç –¥–∞—ë—Ç –¥–æ—Å—Ç—É–ø –∫ –ø—Ä–µ–º–∏—É–º-–∫–æ–Ω—Ç–µ–Ω—Ç—É.\n"
                         "–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å ‚¨áÔ∏è", reply_markup=kb)


# ===== –û–ë–†–ê–ë–û–¢–ß–ò–ö –ù–ê–ñ–ê–¢–ò–Ø –ù–ê –ö–ù–û–ü–ö–£ –ü–û–ö–£–ü–ö–ò –ü–û–î–ü–ò–°–ö–ò =====
@dp.callback_query(F.data == "buy_subscription")
async def create_payment(callback: CallbackQuery):
    await callback.answer()
    user_id = callback.from_user.id
    order_id = f"sub-{user_id}-{int(datetime.now().timestamp())}"

    payload = {
        "amount": "1",
        "currency": "TON",
        "order_id": order_id
    }
    json_data = json.dumps(payload)

    async with ClientSession() as session:
        response = await session.post(
            "https://api.heleket.com/v1/payment",
            headers=generate_headers(json_data),
            data=json_data
        )
        data = await response.json()

    uuid = data["result"]["uuid"]
    url = data["result"]["url"]

    await set_invoice_uuid(user_id, uuid)

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîÅ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data=f"check_payment:{uuid}")]
    ])

    await callback.message.answer(f"–ü–µ—Ä–µ–π–¥–∏ –ø–æ —Å—Å—ã–ª–∫–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã:\n<a href='{url}'>{url}</a>",
                                  disable_web_page_preview=True,
                                  reply_markup=kb)


# ===== –û–ë–†–ê–ë–û–¢–ß–ò–ö –ü–†–û–í–ï–†–ö–ò –ù–ê –û–°–£–©–ï–°–¢–í–õ–ï–ù–ò–ï –ü–õ–ê–¢–ï–ñ–ê =====
@dp.message(Command("check"))
async def check_last_payment(message: Message):
    user_id = message.from_user.id
    uuid = await get_invoice_uuid(user_id)
    if not uuid:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏.")
        return

    json_data = json.dumps({"uuid": uuid})

    async with ClientSession() as session:
        response = await session.post(
            "https://api.heleket.com/v1/payment/info",
            headers=generate_headers(json_data),
            data=json_data
        )
        data = await response.json()

    status = data["result"]["status"]

    if status == "paid":
        until = datetime.now() + timedelta(days=30)
        await set_subscription(user_id, until.strftime("%Y-%m-%d"))
        await message.answer(f"‚úÖ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!\n–ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –¥–æ <b>{until.date()}</b>")
    else:
        await message.answer("‚è≥ –û–ø–ª–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


# ===== –ü–†–û–í–ï–†–ö–ê –ü–õ–ê–¢–ï–ñ–ê =====
@dp.callback_query(F.data.startswith("check_payment:"))
async def check_payment(callback: CallbackQuery):
    await callback.answer()
    uuid = callback.data.split(":")[1]

    json_data = json.dumps({"uuid": uuid})

    async with ClientSession() as session:
        response = await session.post(
            "https://api.heleket.com/v1/payment/info",
            headers=generate_headers(json_data),
            data=json_data
        )
        data = await response.json()

    status = data["result"]["status"]
    user_id = callback.from_user.id

    if status == "paid":
        until = datetime.now() + timedelta(days=30)
        await set_subscription(user_id, until.strftime("%Y-%m-%d"))
        await callback.message.answer("‚úÖ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!\n"
                                      f"–ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –¥–æ <b>{until.date()}</b>")
    else:
        await callback.message.answer("‚è≥ –û–ø–ª–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


# ===== –õ–ò–ß–ù–´–ô –ö–ê–ë–ò–ù–ï–¢ =====
@dp.callback_query(F.data == "profile")
async def show_profile(callback: CallbackQuery):
    await callback.answer()
    user_id = callback.from_user.id
    until = await get_subscription(user_id)

    if until:
        text = f"üë§ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å\n\nüìÖ –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –¥–æ: <b>{until}</b>"
    else:
        text = "üë§ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å\n\n‚ùå –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞."

    await callback.message.answer(text)


# ===== –û–ë–†–ê–ë–û–¢–ß–ò–ö –í–°–ï–• –û–°–¢–ê–õ–¨–ù–´–• –°–û–û–ë–©–ï–ù–ò–ô =====
@dp.message()
async def echo(message: Message):
    await message.answer("–ù–∞–ø–∏—à–∏ /start —á—Ç–æ–±—ã –∫—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –∏–ª–∏ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ—Ñ–∏–ª—å.")


async def main():
    await init_db()
    bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
    await dp.start_polling(bot)


if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO)
    asyncio.run(main())
